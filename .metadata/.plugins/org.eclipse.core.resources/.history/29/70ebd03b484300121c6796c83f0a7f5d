package alex.veit.bookreadingstats;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.v4.app.NavUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.Chronometer;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class SessionsActivity extends Activity {

	private static final String MANUAL_DIALOG_SHOWING = "MANUAL_DIALOG_SHOWING";

	private static final String THIS_HOUR = "THIS_HOUR";
	private static final String THIS_MINUTE = "THIS_MINUTE";
	private static final String PAGE_DIALOG_SHOWING = "PAGE_DIALOG_SHOWING";
	private static final String CHRON_DIALOG_SHOWING = "CHRON_DIALOG_SHOWING";
	private static final String LOCAL_BS = "LOCAL_BS";
	private static final String MY_BS = "MY_BS";
	private static final String HAS_ADDED = "HAS_ADDED";
	private static final String PAGE_STRING = "PAGE_STRING";
	private static final String BASE_STR = "BASE_STR";
	private static final String ELAPSED_STR = "ELAPSED_STR";

	private static final String CHRON_IS_RUNNING = "CHRON_IS_RUNNING";

	private ArrayAdapter<Session> _adapter;
	private long _base;
	private BookStats _bs;
	private BookStats _localBS;
	private long _elapsed;
	private ListView _myListView;
	private boolean _hasAdded;
	private boolean _chronIsRunning;
	private Dialog _dialogManual;
	private Dialog _dialogPage;
	private Dialog _dialogChron;
	private EditText _hours;
	private EditText _minutes;
	private EditText _page;
	private Button _manualDone;
	private Chronometer _chronometer;
	private Button _buttonStartChron;
	private Button _buttonStopChron;
	private Button _buttonResetChron;
	private Button _buttonDoneChron;

	protected boolean autoAddSession(final Chronometer mChronometer) {
		long elapsedMillis = this._elapsed - mChronometer.getBase();
		elapsedMillis /= 1000;
		if (this._bs.addSession(elapsedMillis)) {
			this._adapter.notifyDataSetChanged();
			return true;
		} else
			new AlertDialog.Builder(this)
					.setTitle("Alert!")
					.setMessage("Please read for more then 1 minute.")
					.setPositiveButton(
							"OK",
							new android.content.DialogInterface.OnClickListener() {
								@Override
								public void onClick(final DialogInterface arg0,
										final int arg1) {
								}
							}).show();
		return false;

	}

	public void cancel(final View view) {
		this.onBackPressed();
	}

	private void chronCancel() {
		this._chronometer.stop();
		this._chronometer.setBase(SystemClock.elapsedRealtime());
		SessionsActivity.this._base = 0;
		SessionsActivity.this._dialogChron.dismiss();

	}

	private void chronDone() {
		this._chronometer.setBase(SystemClock.elapsedRealtime());
		SessionsActivity.this._base = 0;
		SessionsActivity.this._dialogChron.dismiss();
		SessionsActivity.this._dialogPage.show();

	}

	private void chronReset() {
		this._chronometer.setBase(SystemClock.elapsedRealtime());
		SessionsActivity.this._base = 0;
		this._buttonResetChron.setEnabled(false);

	}

	private void chronStart() {
		this._chronometer.setBase(SystemClock.elapsedRealtime()
				+ SessionsActivity.this._base);
		this._chronometer.start();
		this._buttonStartChron.setEnabled(false);
		this._buttonStopChron.setEnabled(true);
		this._buttonDoneChron.setEnabled(false);
		this._buttonResetChron.setEnabled(false);
		final Toast toast = Toast.makeText(SessionsActivity.this,
				"Start reading!", Toast.LENGTH_SHORT);
		toast.show();
		_chronIsRunning = true;

	}

	private void chronStop() {
		SessionsActivity.this._elapsed = SystemClock.elapsedRealtime();
		SessionsActivity.this._base = this._chronometer.getBase()
				- SessionsActivity.this._elapsed;
		this._chronometer.stop();
		this._buttonStartChron.setEnabled(true);
		this._buttonStopChron.setEnabled(false);
		this._buttonResetChron.setEnabled(true);
		this._buttonDoneChron.setEnabled(true);
		_chronIsRunning = false;

	}

	public void done(final View view) {

		this._bs._alertNewSessions = false;
		final Intent returnIntent = new Intent(this, SessionsActivity.class);
		returnIntent.putExtra(BookStats._CLASS, this._bs);
		super.setResult(Activity.RESULT_OK, returnIntent);
		super.finish();

	}

	public void manualAdd(final View view) {
		this._dialogManual.show();
	}

	@Override
	public void onBackPressed() {
		if (this._bs._alertNewSessions)
			new AlertDialog.Builder(this)
					.setTitle("Alert!")
					.setMessage("Save changes to sessions?")
					.setPositiveButton(
							"Yes",
							new android.content.DialogInterface.OnClickListener() {
								@Override
								public void onClick(final DialogInterface arg0,
										final int arg1) {
									SessionsActivity.this.done(null);
								}
							})
					.setNegativeButton(
							"No",
							new android.content.DialogInterface.OnClickListener() {
								@Override
								public void onClick(final DialogInterface arg0,
										final int arg1) {
									SessionsActivity.super.onBackPressed();
								}
							}).show();
		else
			super.onBackPressed();

	}

	@Override
	protected void onCreate(final Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		super.setContentView(R.layout.activity_sessions);
		// Show the Up button in the action bar.
		// super.getActionBar().setDisplayHomeAsUpEnabled(true);
		this._bs = (BookStats) super.getIntent().getParcelableExtra(
				BookStats._CLASS);
		((TextView) super.findViewById(R.id.textViewBookName))
				.setText(this._bs._name);
		this._myListView = (ListView) super.findViewById(R.id.listViewSessions);
		this.setAdapter();
		this._base = 0;
		if (this._bs._pagesRed == this._bs._totalPages) {
			final Button manual = (Button) super
					.findViewById(R.id.buttonManualAdd);
			final Button start = (Button) super
					.findViewById(R.id.buttonStartSes);
			final Button done = (Button) super.findViewById(R.id.buttonDoneSes);
			final Button cancel = (Button) super
					.findViewById(R.id.buttonCancelSes);
			manual.setEnabled(false);
			start.setEnabled(false);
			done.setEnabled(false);
			cancel.setText("Back");

		}
		this._myListView
				.setOnItemLongClickListener(new OnItemLongClickListener() {

					@Override
					public boolean onItemLongClick(final AdapterView<?> parent,
							final View view, final int position, final long id) {

						final int thisID = (int) id;

						new AlertDialog.Builder(SessionsActivity.this)
								.setTitle("Delete this session?")
								.setMessage(
										SessionsActivity.this._bs._sessions
												.get(thisID)._value)
								.setPositiveButton(
										"Yes",
										new android.content.DialogInterface.OnClickListener() {
											@Override
											public void onClick(
													final DialogInterface arg0,
													final int arg1) {
												SessionsActivity.this._bs
														.deleteSes(thisID);
												SessionsActivity.this._adapter
														.notifyDataSetChanged();
											}
										})
								.setNegativeButton(
										"No",
										new android.content.DialogInterface.OnClickListener() {
											@Override
											public void onClick(
													final DialogInterface arg0,
													final int arg1) {
											}
										}).show();

						return false;
					}
				});

		this.setManualDialog();
		this.setPageDialog();
		this.setChronDialog();

		super.getWindow().setSoftInputMode(
				WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);

	}

	@Override
	public boolean onCreateOptionsMenu(final Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		super.getMenuInflater().inflate(R.menu.activity_sessions, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(final MenuItem item) {
		switch (item.getItemId()) {
		/*
		 * This ID represents the Home or Up button. In the case of this //
		 * activity, the Up button is shown. Use NavUtils to allow users // to
		 * navigate up one level in the application structure. For // more
		 * details, see the Navigation pattern on Android Design: // //
		 * http://developer
		 * .android.com/design/patterns/navigation.html#up-vs-back
		 */
		case android.R.id.home:
			NavUtils.navigateUpFromSameTask(this);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onRestoreInstanceState(final Bundle savedInstanceState) {
		super.onRestoreInstanceState(savedInstanceState);
		// Restore UI state from the savedInstanceState.
		// This bundle has also been passed to onCreate.

		this._localBS = savedInstanceState
				.getParcelable(SessionsActivity.LOCAL_BS);
		this._bs = savedInstanceState.getParcelable(SessionsActivity.MY_BS);
		this.setAdapter();

		_base = savedInstanceState.getLong(BASE_STR);
		_elapsed = savedInstanceState.getLong(ELAPSED_STR);
		_chronIsRunning = savedInstanceState.getBoolean(CHRON_IS_RUNNING);

		if (savedInstanceState
				.getBoolean(SessionsActivity.MANUAL_DIALOG_SHOWING)) {
			this._hours.setText(savedInstanceState
					.getString(SessionsActivity.THIS_HOUR));
			this._minutes.setText(savedInstanceState
					.getString(SessionsActivity.THIS_MINUTE));
			this._hasAdded = savedInstanceState
					.getBoolean(SessionsActivity.HAS_ADDED);
			this._dialogManual.show();
			if (this._hasAdded)
				this._manualDone.setEnabled(true);
		}

		if (savedInstanceState.getBoolean(SessionsActivity.PAGE_DIALOG_SHOWING)) {
			this._dialogPage.show();
			this._page.setText(savedInstanceState
					.getString(SessionsActivity.PAGE_STRING));
		}

		if (savedInstanceState
				.getBoolean(SessionsActivity.CHRON_DIALOG_SHOWING)) {
			this._dialogChron.show();
			if (_chronIsRunning)
				chronStart();
		}

	}

	@Override
	public void onSaveInstanceState(final Bundle savedInstanceState) {
		super.onSaveInstanceState(savedInstanceState);
		// Save UI state changes to the savedInstanceState.
		// This bundle will be passed to onCreate if the process is
		// killed and restarted.

		savedInstanceState.putParcelable(SessionsActivity.LOCAL_BS,
				this._localBS);
		savedInstanceState.putParcelable(SessionsActivity.MY_BS, this._bs);

		savedInstanceState.putLong(BASE_STR, _base);
		savedInstanceState.putLong(ELAPSED_STR, _elapsed);
		savedInstanceState.putBoolean(CHRON_IS_RUNNING, _chronIsRunning);

		if (this._dialogManual.isShowing()) {
			savedInstanceState.putBoolean(
					SessionsActivity.MANUAL_DIALOG_SHOWING, true);
			savedInstanceState.putString(SessionsActivity.THIS_HOUR,
					this._hours.getText().toString());
			savedInstanceState.putString(SessionsActivity.THIS_MINUTE,
					this._minutes.getText().toString());
			savedInstanceState.putBoolean(SessionsActivity.HAS_ADDED,
					this._hasAdded);
		} else
			savedInstanceState.putBoolean(
					SessionsActivity.MANUAL_DIALOG_SHOWING, false);

		if (this._dialogPage.isShowing()) {
			savedInstanceState.putBoolean(SessionsActivity.PAGE_DIALOG_SHOWING,
					true);
			savedInstanceState.putString(SessionsActivity.PAGE_STRING,
					this._page.getText().toString());
		} else
			savedInstanceState.putBoolean(SessionsActivity.PAGE_DIALOG_SHOWING,
					false);

		if (this._dialogChron.isShowing()) {
			savedInstanceState.putBoolean(
					SessionsActivity.CHRON_DIALOG_SHOWING, true);
		} else
			savedInstanceState.putBoolean(
					SessionsActivity.CHRON_DIALOG_SHOWING, false);

	}

	private void setAdapter() {
		this._adapter = new ArrayAdapter<Session>(this,
				android.R.layout.simple_list_item_1, this._bs._sessions);
		this._myListView.setAdapter(this._adapter);
		this._adapter.notifyDataSetChanged();
	}

	private void setChronDialog() {
		this._dialogChron = new Dialog(this);
		this._dialogChron.setContentView(R.layout.dialog_chronometer);
		this._dialogChron.setTitle("Session #" + this._bs._lastSession);

		this._chronometer = (Chronometer) this._dialogChron
				.findViewById(R.id.chronometer);
		final Button buttonCancel = (Button) this._dialogChron
				.findViewById(R.id.buttonCancelChron);
		this._buttonStartChron = (Button) this._dialogChron
				.findViewById(R.id.buttonStart);
		this._buttonStopChron = (Button) this._dialogChron
				.findViewById(R.id.buttonStop);
		this._buttonResetChron = (Button) this._dialogChron
				.findViewById(R.id.buttonReset);
		this._buttonDoneChron = (Button) this._dialogChron
				.findViewById(R.id.buttonDoneChron);

		this._buttonStartChron.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				SessionsActivity.this.chronStart();
			}

		});

		this._buttonStopChron.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				SessionsActivity.this.chronStop();

			}

		});

		this._buttonResetChron.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				SessionsActivity.this.chronReset();

			}

		});

		this._buttonDoneChron.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				if (SessionsActivity.this
						.autoAddSession(SessionsActivity.this._chronometer))
					SessionsActivity.this.chronDone();
			}

		});

		buttonCancel.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				SessionsActivity.this.chronCancel();
			}

		});

	}

	private void setManualDialog() {
		this._dialogManual = new Dialog(this);
		this._dialogManual.setContentView(R.layout.dialog_manual);
		this._dialogManual.setTitle("Session #" + this._bs._lastSession);

		this._hours = (EditText) this._dialogManual
				.findViewById(R.id.editTextHour);
		this._minutes = (EditText) this._dialogManual
				.findViewById(R.id.editTextMinute);

		final Button buttonAdd = (Button) this._dialogManual
				.findViewById(R.id.buttonAddManual);
		this._manualDone = (Button) this._dialogManual
				.findViewById(R.id.buttonDoneManual);
		final Button buttonCancel = (Button) this._dialogManual
				.findViewById(R.id.buttonCancelManual);

		this._localBS = new BookStats(this._bs);

		this._hasAdded = false;

		buttonAdd.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(final View v) {
				final int result = SessionsActivity.this._localBS.addSession(
						SessionsActivity.this._hours.getText().toString(),
						SessionsActivity.this._minutes.getText().toString());
				switch (result) {
				case 1:
					SessionsActivity.this._hasAdded = true;
					SessionsActivity.this._hours.setText("");
					SessionsActivity.this._minutes.setText("");
					SessionsActivity.this._hours.requestFocus();
					SessionsActivity.this._dialogManual.setTitle("Session #"
							+ SessionsActivity.this._localBS._lastSession);
					SessionsActivity.this._manualDone.setEnabled(true);
					break;
				case -1:
					new AlertDialog.Builder(SessionsActivity.this)
							.setTitle("Alert!")
							.setMessage("Please input minutes or hours read.")
							.setPositiveButton(
									"OK",
									new android.content.DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												final DialogInterface arg0,
												final int arg1) {
										}
									}).show();
					break;
				case -2:
					new AlertDialog.Builder(SessionsActivity.this)
							.setTitle("Alert!")
							.setMessage("Minutes can not be more then 60.")
							.setPositiveButton(
									"OK",
									new android.content.DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												final DialogInterface arg0,
												final int arg1) {
										}
									}).show();
					break;
				}
			}

		});

		this._manualDone.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(final View v) {
				if (SessionsActivity.this._hasAdded) {
					SessionsActivity.this._dialogManual.dismiss();
					SessionsActivity.this._bs = new BookStats(
							SessionsActivity.this._localBS);
					SessionsActivity.this.setAdapter();

					SessionsActivity.this._dialogPage.show();

					if (SessionsActivity.this._hasAdded) {
						final Toast toast = Toast.makeText(
								SessionsActivity.this,
								"Sessions Added Successfully!",
								Toast.LENGTH_SHORT);
						toast.show();
					}
					SessionsActivity.this._hasAdded = false;
				} else
					new AlertDialog.Builder(SessionsActivity.this)
							.setTitle("Alert!")
							.setMessage("Please input session time.")
							.setPositiveButton(
									"OK",
									new android.content.DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												final DialogInterface arg0,
												final int arg1) {
										}
									}).show();

			}

		});

		buttonCancel.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(final View v) {
				SessionsActivity.this._dialogManual.dismiss();
			}

		});

	}

	private void setPageDialog() {
		this._dialogPage = new Dialog(this);
		this._dialogPage.setContentView(R.layout.dialog_page);
		this._dialogPage.setTitle("Page");

		final Button buttonOK = (Button) this._dialogPage
				.findViewById(R.id.buttonOK);
		this._page = (EditText) this._dialogPage
				.findViewById(R.id.editTextPage);

		final TextView total = (TextView) this._dialogPage
				.findViewById(R.id.textViewTPages);

		total.setText(super.getResources().getString(R.string.totalPages) + " "
				+ this._bs._totalPages);

		this._page.setText(Integer.toString(this._bs._pagesRed));

		buttonOK.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				final int pagesRead = Integer
						.parseInt(SessionsActivity.this._page.getText()
								.toString());
				if (pagesRead <= SessionsActivity.this._bs._totalPages) {
					SessionsActivity.this._bs._pagesRed = Integer
							.parseInt(SessionsActivity.this._page.getText()
									.toString());
					SessionsActivity.this._dialogPage.dismiss();
				} else
					new AlertDialog.Builder(SessionsActivity.this)
							.setTitle("Alert!")
							.setMessage(
									"Pages read can not be grater then total pages.")
							.setPositiveButton(
									"OK",
									new android.content.DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												final DialogInterface arg0,
												final int arg1) {
										}
									}).show();
			}
		});

	}

	public void startSession(final View view) {
		this._dialogChron.show();

	}
}
