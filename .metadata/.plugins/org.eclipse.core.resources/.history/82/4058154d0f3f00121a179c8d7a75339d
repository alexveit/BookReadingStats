package alex.veit.bookreadingstats;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.EditText;
import android.widget.TextView;

public class BookActivity extends Activity {

	private static final int SESSIONS_REQUEST_CODE = 200;
	public static final String SESSIONS_STR = "SESSIONS";
	public static final String TITLE_STR = "TITLE";

	private long _bookID;
	private EditText _bookName;
	private BookStats _bs;
	private boolean _done;
	private TextView _elapsed;
	private TextView _estReadTime;
	private TextView _estTimeLeft;
	private EditText _pagesRed;
	private TextView _percentage;
	private EditText _totalPages;
	private boolean _update;
	private BookStatsDatabaseManager _db;

	public void addSession(final View view) {
		if (this.retrieveData()) {
			final Intent intent = new Intent(this, SessionsActivity.class);
			intent.putExtra(BookStats._CLASS, this._bs);
			this.startActivityForResult(intent,
					BookActivity.SESSIONS_REQUEST_CODE);
		}
	}

	public boolean calculateBook(final View view) {

		if (this.retrieveData()) {
			if (!this._done)
				this.updateControls();
			return true;
		}
		return false;
	}

	public void cancel(final View view) {
		this.onBackPressed();
	}

	public void done(final View view) {

		if (!this._bookName.getText().toString().isEmpty()) {
			this._done = true;
			if (this.calculateBook(view)) {
				final Intent returnIntent = new Intent();
				if (this._update) {
					returnIntent.putExtra(MainActivity.BOOK_ID, this._bookID);
					returnIntent.putExtra(MainActivity.UPDATE_BOOK, true);
				}
				returnIntent.putExtra(BookStats._CLASS, this._bs);
				super.setResult(Activity.RESULT_OK, returnIntent);
				super.finish();
			} else
				this._done = false;
		} else
			new AlertDialog.Builder(this).setTitle("Alert!")
					.setMessage("Enter Book Name")
					.setPositiveButton("OK", new OnClickListener() {
						@Override
						public void onClick(final DialogInterface arg0,
								final int arg1) {
						}
					}).show();

	}

	@Override
	protected void onActivityResult(final int requestCode,
			final int resultCode, final Intent data) {

		if (resultCode == Activity.RESULT_OK) {
			this._bs = (BookStats) data.getParcelableExtra(BookStats._CLASS);
			this._pagesRed.setText(Integer.toString(this._bs._pagesRed));
			this.calculateBook(null);
		}
	}

	@Override
	public void onBackPressed() {
		super.onBackPressed();
		super.setResult(Activity.RESULT_CANCELED);
		super.finish();

	}

	@Override
	protected void onCreate(final Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		super.setContentView(R.layout.activity_book);

		this._bookName = (EditText) super.findViewById(R.id.editTextBookName);
		this._totalPages = (EditText) super
				.findViewById(R.id.editTextTotalPages);
		this._pagesRed = (EditText) super.findViewById(R.id.editTextPagesRed);
		this._percentage = (TextView) super.findViewById(R.id.textViewPR);
		this._elapsed = (TextView) super.findViewById(R.id.textViewET);
		this._estReadTime = (TextView) super.findViewById(R.id.textViewERT);
		this._estTimeLeft = (TextView) super.findViewById(R.id.textViewETL);

		this._done = false;
		if (!super.getIntent().getExtras().getBoolean(MainActivity.UPDATE_BOOK)) {
			this._bs = new BookStats();
			this._update = false;
			this._bookID = -1;
		} else {
			this._update = true;
			this._bookID = super.getIntent().getExtras()
					.getLong(MainActivity.BOOK_ID);
			this._bs = (BookStats) super.getIntent().getParcelableExtra(
					BookStats._CLASS);
			this._bookName.setText(this._bs._name);
			this._pagesRed.setText(Integer.toString(this._bs._pagesRed));
			this._totalPages.setText(Integer.toString(this._bs._totalPages));
			this.calculateBook(null);
		}
		
		this._db = super.getIntent().getParcelableExtra(MainActivity.DB_INSTANCE);
		
		final TextWatcher tw = new TextWatcher() {

			@Override
			public void afterTextChanged(final Editable arg0) {
				BookActivity.this._bs._needsUpdate = true;

			}

			@Override
			public void beforeTextChanged(final CharSequence arg0,
					final int arg1, final int arg2, final int arg3) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onTextChanged(final CharSequence arg0, final int arg1,
					final int arg2, final int arg3) {
				// TODO Auto-generated method stub

			}

		};

		this._bookName.addTextChangedListener(tw);
		this._totalPages.addTextChangedListener(tw);
		this._pagesRed.addTextChangedListener(tw);
		
		super.getWindow().setSoftInputMode(
				WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
	}

	@Override
	public boolean onCreateOptionsMenu(final Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		super.getMenuInflater().inflate(R.menu.activity_book, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(final MenuItem item) {
		switch (item.getItemId()) {
		/*
		 * This ID represents the Home or Up button. In the case of this //
		 * activity, the Up button is shown. Use NavUtils to allow users // to
		 * navigate up one level in the application structure. For // more
		 * details, see the Navigation pattern on Android Design: // //
		 * http://developer
		 * .android.com/design/patterns/navigation.html#up-vs-back
		 */
		case android.R.id.home:
			NavUtils.navigateUpFromSameTask(this);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	private boolean retrieveData() {
		int tempRed = 0, tempTotal = 0;

		this._bs._name = this._bookName.getText().toString();
		if (!this._totalPages.getText().toString().isEmpty()) {
			tempTotal = Integer.parseInt(this._totalPages.getText().toString());
			if (!this._pagesRed.getText().toString().isEmpty())
				tempRed = Integer.parseInt(this._pagesRed.getText().toString());
			if (tempRed <= tempTotal) {
				this._bs._totalPages = tempTotal;
				this._bs._pagesRed = tempRed;
			} else {
				new AlertDialog.Builder(this)
						.setTitle("Alert!")
						.setMessage(
								"Pages red can't be greater than total pages.")
						.setPositiveButton("OK", new OnClickListener() {
							@Override
							public void onClick(final DialogInterface arg0,
									final int arg1) {
							}
						}).show();
				return false;
			}
			return true;
		} else
			new AlertDialog.Builder(this).setTitle("Alert!")
					.setMessage("Enter total pages")
					.setPositiveButton("OK", new OnClickListener() {
						@Override
						public void onClick(final DialogInterface arg0,
								final int arg1) {
						}
					}).show();

		return false;

	}

	private void updateControls() {

		this._percentage.setText(super.getResources().getString(
				R.string.percentageRed)
				+ " " + this._bs.getIntPercentageString() + "%");

		this._elapsed.setText(" " + this._bs.getElapsedTimeString());

		this._estReadTime.setText(" " + this._bs.getEstimatedReadTimeString());

		this._estTimeLeft.setText(" " + this._bs.getEstimatedTimeLeftString());
	}
}
