package alex.veit.bookreadingstats;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.v4.app.NavUtils;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.Chronometer;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class SessionsActivity extends Activity {

	private static final String MANUAL_DIALOG_SHOWING = "MANUAL_DIALOG_SHOWING";

	private static final String THIS_HOUR = "THIS_HOUR";
	private static final String THIS_MINUTE = null;

	private static final String PAGE_DIALOG_SHOWING = null;

	private ArrayAdapter<Session> _adapter;
	private long _base;
	private BookStats _bs;
	private long _elapsed;
	private ListView _myListView;
	private boolean _hasAdded;
	private Dialog _dialogManual;
	private Dialog _dialogPage;
	private EditText _hours;
	private EditText _minutes;

	protected boolean autoAddSession(final Chronometer mChronometer) {
		long elapsedMillis = this._elapsed - mChronometer.getBase();
		elapsedMillis /= 1000;
		if (this._bs.addSession(elapsedMillis)) {
			this._adapter.notifyDataSetChanged();
			return true;
		} else
			new AlertDialog.Builder(this)
					.setTitle("Alert!")
					.setMessage("Please read for more then 1 minute.")
					.setPositiveButton(
							"OK",
							new android.content.DialogInterface.OnClickListener() {
								@Override
								public void onClick(final DialogInterface arg0,
										final int arg1) {
								}
							}).show();
		return false;

	}

	public void cancel(final View view) {
		this.onBackPressed();
	}

	public void done(final View view) {

		this._bs._alertNewSessions = false;
		final Intent returnIntent = new Intent(this, SessionsActivity.class);
		returnIntent.putExtra(BookStats._CLASS, this._bs);
		super.setResult(Activity.RESULT_OK, returnIntent);
		super.finish();

	}

	public void manualAdd(final View view) {
		_dialogManual.show();
	}

	@Override
	public void onBackPressed() {
		if (this._bs._alertNewSessions)
			new AlertDialog.Builder(this)
					.setTitle("Alert!")
					.setMessage("Save changes to sessions?")
					.setPositiveButton(
							"Yes",
							new android.content.DialogInterface.OnClickListener() {
								@Override
								public void onClick(final DialogInterface arg0,
										final int arg1) {
									SessionsActivity.this.done(null);
								}
							})
					.setNegativeButton(
							"No",
							new android.content.DialogInterface.OnClickListener() {
								@Override
								public void onClick(final DialogInterface arg0,
										final int arg1) {
									SessionsActivity.super.onBackPressed();
								}
							}).show();
		else
			super.onBackPressed();

	}

	@Override
	protected void onCreate(final Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		super.setContentView(R.layout.activity_sessions);
		// Show the Up button in the action bar.
		// super.getActionBar().setDisplayHomeAsUpEnabled(true);
		this._bs = (BookStats) super.getIntent().getParcelableExtra(
				BookStats._CLASS);
		((TextView) super.findViewById(R.id.textViewBookName))
				.setText(this._bs._name);
		this._myListView = (ListView) super.findViewById(R.id.listViewSessions);
		// this._mySesText = (EditText)
		// super.findViewById(R.id.editTextSessions);
		this._adapter = new ArrayAdapter<Session>(this,
				android.R.layout.simple_list_item_1, this._bs._sessions);
		this._myListView.setAdapter(this._adapter);
		this._adapter.notifyDataSetChanged();
		this._base = 0;
		if (this._bs._pagesRed == this._bs._totalPages) {
			final Button manual = (Button) super
					.findViewById(R.id.buttonManualAdd);
			final Button start = (Button) super
					.findViewById(R.id.buttonStartSes);
			final Button done = (Button) super.findViewById(R.id.buttonDoneSes);
			final Button cancel = (Button) super
					.findViewById(R.id.buttonCancelSes);
			manual.setEnabled(false);
			start.setEnabled(false);
			done.setEnabled(false);
			cancel.setText("Back");

		}
		this._myListView
				.setOnItemLongClickListener(new OnItemLongClickListener() {

					@Override
					public boolean onItemLongClick(final AdapterView<?> parent,
							final View view, final int position, final long id) {

						final int thisID = (int) id;

						new AlertDialog.Builder(SessionsActivity.this)
								.setTitle("Delete this session?")
								.setMessage(
										SessionsActivity.this._bs._sessions
												.get(thisID)._value)
								.setPositiveButton(
										"Yes",
										new android.content.DialogInterface.OnClickListener() {
											@Override
											public void onClick(
													final DialogInterface arg0,
													final int arg1) {
												SessionsActivity.this._bs
														.deleteSes(thisID);
												SessionsActivity.this._adapter
														.notifyDataSetChanged();
											}
										})
								.setNegativeButton(
										"No",
										new android.content.DialogInterface.OnClickListener() {
											@Override
											public void onClick(
													final DialogInterface arg0,
													final int arg1) {
											}
										}).show();

						return false;
					}
				});

		setManualDialog();
		setPageDialog();

		super.getWindow().setSoftInputMode(
				WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);

	}

	private void setManualDialog() {
		_dialogManual = new Dialog(this);
		_dialogManual.setContentView(R.layout.dialog_manual);
		_dialogManual.setTitle("Session #" + this._bs._lastSession);

		_hours = (EditText) _dialogManual.findViewById(R.id.editTextHour);
		_minutes = (EditText) _dialogManual.findViewById(R.id.editTextMinute);

		final Button buttonAdd = (Button) _dialogManual
				.findViewById(R.id.buttonAddManual);
		final Button buttonDone = (Button) _dialogManual
				.findViewById(R.id.buttonDoneManual);
		final Button buttonCancel = (Button) _dialogManual
				.findViewById(R.id.buttonCancelManual);

		final BookStats localBS = new BookStats(this._bs);

		this._hasAdded = false;

		buttonAdd.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(final View v) {
				final int result = localBS.addSession(_hours.getText()
						.toString(), _minutes.getText().toString());
				switch (result) {
				case 1:
					SessionsActivity.this._hasAdded = true;
					_hours.setText("");
					_minutes.setText("");
					_hours.requestFocus();
					_dialogManual.setTitle("Session #" + localBS._lastSession);
					break;
				case -1:
					new AlertDialog.Builder(SessionsActivity.this)
							.setTitle("Alert!")
							.setMessage("Please input minutes or hours read.")
							.setPositiveButton(
									"OK",
									new android.content.DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												final DialogInterface arg0,
												final int arg1) {
										}
									}).show();
					break;
				case -2:
					new AlertDialog.Builder(SessionsActivity.this)
							.setTitle("Alert!")
							.setMessage("Minutes can not be more then 60.")
							.setPositiveButton(
									"OK",
									new android.content.DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												final DialogInterface arg0,
												final int arg1) {
										}
									}).show();
					break;
				}
			}

		});

		buttonDone.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(final View v) {
				if (SessionsActivity.this._hasAdded) {
					_dialogManual.dismiss();
					SessionsActivity.this._bs = new BookStats(localBS);
					SessionsActivity.this._adapter = new ArrayAdapter<Session>(
							SessionsActivity.this,
							android.R.layout.simple_list_item_1,
							SessionsActivity.this._bs._sessions);
					SessionsActivity.this._myListView
							.setAdapter(SessionsActivity.this._adapter);

					SessionsActivity.this._dialogPage.show();

					SessionsActivity.this._adapter.notifyDataSetChanged();
					if (SessionsActivity.this._hasAdded) {
						final Toast toast = Toast.makeText(
								SessionsActivity.this,
								"Sessions Added Successfully!",
								Toast.LENGTH_SHORT);
						toast.show();
					}
					SessionsActivity.this._hasAdded = false;
				} else
					new AlertDialog.Builder(SessionsActivity.this)
							.setTitle("Alert!")
							.setMessage("Please input session time.")
							.setPositiveButton(
									"OK",
									new android.content.DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												final DialogInterface arg0,
												final int arg1) {
										}
									}).show();

			}

		});

		buttonCancel.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(final View v) {
				_dialogManual.dismiss();
			}

		});

	}

	@Override
	public boolean onCreateOptionsMenu(final Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		super.getMenuInflater().inflate(R.menu.activity_sessions, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(final MenuItem item) {
		switch (item.getItemId()) {
		/*
		 * This ID represents the Home or Up button. In the case of this //
		 * activity, the Up button is shown. Use NavUtils to allow users // to
		 * navigate up one level in the application structure. For // more
		 * details, see the Navigation pattern on Android Design: // //
		 * http://developer
		 * .android.com/design/patterns/navigation.html#up-vs-back
		 */
		case android.R.id.home:
			NavUtils.navigateUpFromSameTask(this);
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onSaveInstanceState(Bundle savedInstanceState) {
		super.onSaveInstanceState(savedInstanceState);
		// Save UI state changes to the savedInstanceState.
		// This bundle will be passed to onCreate if the process is
		// killed and restarted.

		if (_dialogManual.isShowing()) {
			savedInstanceState.putBoolean(MANUAL_DIALOG_SHOWING, true);
			savedInstanceState
					.putString(THIS_HOUR, _hours.getText().toString());
			savedInstanceState.putString(THIS_MINUTE, _minutes.getText()
					.toString());
		} else
			savedInstanceState.putBoolean(MANUAL_DIALOG_SHOWING, false);
		
		if (_dialogPage.isShowing()) {
			savedInstanceState.putBoolean(PAGE_DIALOG_SHOWING, true);
		} else
			savedInstanceState.putBoolean(PAGE_DIALOG_SHOWING, false);

	}

	@Override
	public void onRestoreInstanceState(Bundle savedInstanceState) {
		super.onRestoreInstanceState(savedInstanceState);
		// Restore UI state from the savedInstanceState.
		// This bundle has also been passed to onCreate.

		if (savedInstanceState.getBoolean(MANUAL_DIALOG_SHOWING)) {
			_hours.setText(savedInstanceState.getString(THIS_HOUR));
			_minutes.setText(savedInstanceState.getString(THIS_MINUTE));
			_dialogManual.show();
		}

	}

	private void setPageDialog() {
		_dialogPage = new Dialog(this);
		_dialogPage.setContentView(R.layout.dialog_page);
		_dialogPage.setTitle("Page");

		final Button buttonOK = (Button) _dialogPage.findViewById(R.id.buttonOK);
		final EditText page = (EditText) _dialogPage
				.findViewById(R.id.editTextPage);

		final TextView total = (TextView) _dialogPage
				.findViewById(R.id.textViewTPages);

		total.setText(super.getResources().getString(R.string.totalPages) + " "
				+ this._bs._totalPages);

		page.setText(Integer.toString(this._bs._pagesRed));

		buttonOK.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				final int pagesRead = Integer.parseInt(page.getText()
						.toString());
				if (pagesRead <= SessionsActivity.this._bs._totalPages) {
					SessionsActivity.this._bs._pagesRed = Integer.parseInt(page
							.getText().toString());
					_dialogPage.dismiss();
				} else
					new AlertDialog.Builder(SessionsActivity.this)
							.setTitle("Alert!")
							.setMessage(
									"Pages read can not be grater then total pages.")
							.setPositiveButton(
									"OK",
									new android.content.DialogInterface.OnClickListener() {
										@Override
										public void onClick(
												final DialogInterface arg0,
												final int arg1) {
										}
									}).show();
			}
		});

	}

	public void startSession(final View view) {

		// custom dialog
		final Dialog dialogChron = new Dialog(this);
		dialogChron.setContentView(R.layout.dialog_chronometer);
		dialogChron.setTitle("Session #" + this._bs._lastSession);

		final Chronometer mChronometer = (Chronometer) dialogChron
				.findViewById(R.id.chronometer);
		final Button buttonCancel = (Button) dialogChron
				.findViewById(R.id.buttonCancelChron);
		final Button buttonStart = (Button) dialogChron
				.findViewById(R.id.buttonStart);
		final Button buttonStop = (Button) dialogChron
				.findViewById(R.id.buttonStop);
		final Button buttonReset = (Button) dialogChron
				.findViewById(R.id.buttonReset);
		final Button buttonDone = (Button) dialogChron
				.findViewById(R.id.buttonDoneChron);

		buttonStart.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				mChronometer.setBase(SystemClock.elapsedRealtime()
						+ SessionsActivity.this._base);
				mChronometer.start();
				buttonStart.setEnabled(false);
				buttonStop.setEnabled(true);
				buttonDone.setEnabled(false);
				buttonReset.setEnabled(false);
				final Toast toast = Toast.makeText(SessionsActivity.this,
						"Start reading!", Toast.LENGTH_SHORT);
				toast.show();

			}
		});

		buttonStop.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				SessionsActivity.this._elapsed = SystemClock.elapsedRealtime();
				SessionsActivity.this._base = mChronometer.getBase()
						- SessionsActivity.this._elapsed;
				mChronometer.stop();
				buttonStart.setEnabled(true);
				buttonStop.setEnabled(false);
				buttonReset.setEnabled(true);
				buttonDone.setEnabled(true);
			}
		});

		buttonReset.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				mChronometer.setBase(SystemClock.elapsedRealtime());
				SessionsActivity.this._base = 0;
				buttonReset.setEnabled(false);
			}
		});

		buttonDone.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				if (SessionsActivity.this.autoAddSession(mChronometer)) {
					mChronometer.setBase(SystemClock.elapsedRealtime());
					SessionsActivity.this._base = 0;
					dialogChron.dismiss();
					SessionsActivity.this._dialogPage.show();
				}

			}
		});

		buttonCancel.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(final View v) {
				mChronometer.stop();
				mChronometer.setBase(SystemClock.elapsedRealtime());
				SessionsActivity.this._base = 0;
				dialogChron.dismiss();
			}
		});

		dialogChron.show();

	}
}
